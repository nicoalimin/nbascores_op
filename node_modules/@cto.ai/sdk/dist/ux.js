"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_ux_1 = __importDefault(require("cli-ux"));
const inquirer = require("@cto.ai/inquirer");
const cliProgress = __importStar(require("cli-progress"));
const node_notifier_1 = __importDefault(require("node-notifier"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const colors_1 = __importDefault(require("./colors"));
const { table, tree, action } = cli_ux_1.default;
function url(text, url) {
    // sdk.track(['UX', 'url'], { text, url });
    return terminal_link_1.default(colors_1.default.multiBlue(text), url);
}
function annotation(text, annotation) {
    // sdk.track(['UX', 'annotation'], { text, annotation });
    cli_ux_1.default.annotation(text, annotation);
}
function notify(options) {
    // sdk.track(['UX', 'notify'], options);
    node_notifier_1.default.notify(options);
}
async function print(text) {
    return new Promise(resolve => {
        console.log(text);
        resolve();
    });
}
async function prompt(questions) {
    // sdk.track(['UX', 'prompt'], questions);
    return inquirer.prompt(questions);
}
function start(text) {
    // sdk.track(['UX', 'spiner-start']);
    action.start(text);
}
function stop(text) {
    // sdk.track(['UX', 'spiner-stop']);
    action.stop(text);
}
async function wait(duration) {
    // sdk.track(['UX', 'wait'], { duration });
    await cli_ux_1.default.wait(duration);
}
const present = {
    format: colors_1.default.callOutCyan(' {bar} {percentage}% '),
    barCompleteChar: '\u2588',
    barIncompleteChar: '\u2591',
};
function init(options = present) {
    // sdk.track(['UX', 'progress bar'], { options });
    return new cliProgress.Bar(options);
}
exports.default = {
    print,
    prompt,
    colors: colors_1.default,
    spinner: {
        start,
        stop,
    },
    wait,
    url,
    annotation,
    table,
    tree,
    progress: { init },
    notify,
    inquirer,
};
